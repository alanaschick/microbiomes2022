---
title: "Project: covid"
author: "Alana Schick, Gut4Health"
date: "`r Sys.Date()`"
output:
  html_document:
    theme: yeti
    highlight: kate
    toc: yes
    toc_float:
      collapsed: no
    toc_depth: 3
  word_document:
    toc: yes
    toc_depth: '3'
  pdf_document:
    toc: yes
    toc_depth: '3'
    highlight: tango
editor_options:
  chunk_output_type: console
always_allow_html: true
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = FALSE, warning = FALSE, message = FALSE, cache = TRUE)
## Load libraries
library(phyloseq)
library(tidyverse)
library(ape)
library(vegan)
library(viridis)
library(grid)
library(gridExtra)
library(DESeq2)
library(fields)
library(nlme)
library(RColorBrewer)
library(pheatmap)
library(knitr)
library(kableExtra)
library(ggpubr)
library(plotrix)
library(corncob)
library(plyr)
library(gplots)
library(corrr)
library(svglite)
library(car)
library(colorspace)
library(ggrepel)
library(factoextra)
```


```{r load}
path_to_project <- "/Users/alana.schick/Desktop/dropbox_temp/bcch/projects/covid/"
path_to_plots <- "/Users/alana.schick/Desktop/dropbox_temp/bcch/projects/covid/plots/"

## Read in files
seqtab <- readRDS(file.path(path_to_project, "magma_ubc/output/seqtab_final.rds"))
taxa <- readRDS(file.path(path_to_project, "magma_ubc/output/taxa_final.rds"))
info <- read.table(file.path(path_to_project, "covid_metadata.txt"), header = TRUE)

## UMN data
#seqtab2 <- readRDS(file.path(path_to_project, "magma_umn/output/seqtab_final.rds"))
#taxa2 <- readRDS(file.path(path_to_project, "magma_umn/output/taxa_final.rds"))

## Match sample names
rownames(info) <- info$SampleID
## Clean up sampleID
info <- info %>% separate(SampleID, c("SampleID", "temp"), sep = "_S")


## Make a phyloseq object
ps <- phyloseq(otu_table(seqtab, taxa_are_rows=FALSE), sample_data(info), tax_table(taxa))

## Remove sequence names, rename to something manageable
## To add: write a file containing the ASV_# names and sequences 
asv_names <- vector(dim(otu_table(ps))[2], mode = "character")
for (i in 1:dim(otu_table(ps))[2]){
	asv_names[i] <- paste("ASV", i, sep = "_")
}
taxa_names(ps) <- asv_names
colnames(otu_table(ps)) <- asv_names
rownames(tax_table(ps)) <- asv_names

## Format and order variables
## Change order of Timepoint factor
sample_data(ps)$Timepoint <- factor(sample_data(ps)$Timepoint, levels = c("Baseline", "3mth", "Control"))
## Convert participant ID to a factor
sample_data(ps)$ParticipantID <- as.factor(sample_data(ps)$ParticipantID)

```

# Individual datasets

## Microbiome data

```{r}

### Reads per sample

#Histogram of reads per sample after quality-filtering. The vertical line represents the cutoff (20000 reads) for samples included in the analysis.

## Remove control samples
ps <- subset_samples(ps, sample_data(ps)$Timepoint != "Control")

### Check read counts per sample
sums <- rowSums(otu_table(ps))
counts <- data.frame(as(sample_data(ps), "data.frame"), TotalReads = sums)

```

Samples removed:

```{r}


## Looks like 3 samples have less than 10000 reads
failed <- counts %>% filter(TotalReads < 10000)
failed <- failed %>% select(SampleID, Timepoint, TotalReads)

#failed
kable(failed) %>% kable_styling(bootstrap_options = "striped", full_width = F, position = "left")

## Remove samples with fewer than 1000 reads
samples_failed <- sample_sums(ps) >= 10000
ps <- prune_samples(samples_failed, ps)

################################
## Prevalence filtering
## Compute prevalence - number of samples in which a taxon appears at least once
prevdf <- apply(X = otu_table(ps), MARGIN = ifelse(taxa_are_rows(ps), yes = 1, no = 2), FUN = function(x){sum(x > 0)})
prevdf <- data.frame(prevalence = prevdf, total_abundance = taxa_sums(ps), tax_table(ps))

## Remove low-prevalence taxa - prevalence defined as the number of samples containing that taxa
## Define prevalence threshold as 5% of total samples
prevalence_threshold <- 0.05 * nsamples(ps)
#prevalence_threshold <- 3
count_threshold <- 5*prevalence_threshold

## Define taxa to filter
keeptaxa <- rownames(prevdf)[(prevdf$prevalence >= prevalence_threshold) & (prevdf$total_abundance > count_threshold)]

## Take relative abundance
rel <- transform_sample_counts(ps, function(x) x / sum(x))

## Execute filter
psf <- prune_taxa(keeptaxa, ps)

## Take relative abundance
relf <- transform_sample_counts(psf, function(x) x / sum(x))
#########################################

## Variance stabilizing transformation
dd <- phyloseq_to_deseq2(ps, ~1)
gm_mean = function(x, na.rm=TRUE){
  exp(sum(log(x[x > 0]), na.rm=na.rm) / length(x))
}
geoMeans = apply(counts(dd), 1, gm_mean)
dd = estimateSizeFactors(dd, geoMeans = geoMeans)
dd = estimateDispersions(dd, fitType = "local")
#plotDispEsts(dddisp)
psvst = ps
otu_table(psvst) <- t(otu_table(getVarianceStabilizedData(dd), taxa_are_rows = TRUE))

###########################################
## Setting colours

## For relative abundance plots
cc10 <- c("#800000", "#e6194b", "#f58231", "#ffe119", "#bfef45", "#3cb44b", "#42d4f4", "#4363d8", "#911eb4", "#f032e6")

cc20 <- c("#e6194b", 
		"#3cb44b",
		"#ffe119",
		"#4363d8",
		"#f58231",
		"#911eb4",
		"#46f0f0",
		"#f032e6",
		"#bcf60c",
		"#fabebe",
		"#008080",
		"#e6beff",
		"#9a6324",
		"#fffac8",
		"#800000",
		"#aaffc3",
		"#808000",
		"#ffd8b1",
		"#000075",
		"#808080")

plot_bar2 <-  function (physeq, x = "Sample", y = "Abundance", fill = NULL, title = NULL, facet_grid = NULL, border_color = NA) 
{
  mdf = psmelt(physeq)
  p = ggplot(mdf, aes_string(x = x, y = y, fill = fill))
  p = p + geom_bar(stat = "identity", position = "stack",  color = border_color)
  p = p + theme(axis.text.x = element_text(angle = -90, hjust = 0))
  if (!is.null(facet_grid)) {
    p <- p + facet_grid(facet_grid)
  }
  if (!is.null(title)) {
    p <- p + ggtitle(title)
  }
  return(p)
}

###########################################
## Ordination - Check for outliers
pslog <- transform_sample_counts(psf, function(x) log(1 + x))

ord <- ordinate(pslog, method = "PCoA", distance = "bray")
evals <- ord$values$Eigenvalues
bb <- plot_ordination(pslog, ord, color = "Timepoint") +
  coord_fixed(sqrt(evals[2]/evals[1])) +
  theme_minimal() +
  scale_color_manual(values = rainbow(n = 6, v = 0.8)) +
  geom_point(size = 2) +
  stat_ellipse(geom = "polygon", type = "t", alpha = 0, lty = 2)
#bb

###########################################
## Need to fix this - not working for some reason
## Note: works with euclidean distance and not with Bray-Curtis distance because reasons
## PCoA with Euclidean distance is equivalent to PCA
###########################################
ord <- ordinate(psvst, method = "PCoA", distance = "euclidean")
evals <- ord$values$Eigenvalues
bb2 <- plot_ordination(psvst, ord, color = "Timepoint") +
 coord_fixed(sqrt(evals[2]/evals[1])) +
 theme_bw() +
 #scale_color_manual(values = cols_treat) +
 geom_point(size = 2) +
stat_ellipse(geom = "polygon", type = "t", alpha = 0, lty = 2)
#bb2

```

### Taxonomic composition

The plot below shows the top 20 most abundant genera across all samples, grouped by timepoint. Values are relative abundance.

```{r, fig.height = 5, fig.width = 10}

gen <- tax_glom(psf, "Genus")

## Normalize to relative abundance
genrel <- transform_sample_counts(gen, function(x) x/sum(x))

## Take top 10 most abundant genera
top10 <- names(sort(taxa_sums(genrel), TRUE))[1:20]
gen10 <- prune_taxa(top10, genrel)

mat <- t(as(otu_table(gen10), "matrix"))
# tmat <- t(mat)

tax_org <- data.frame(row.names = taxa_names(gen10), Genus = tax_table(gen10)[,6])
sample_org <- data.frame(row.names = sample_names(gen10), sample_data(gen10)[,4])

colnames(sample_org) <- "Timepoint"
sample_org$Timepoint <- factor(sample_org$Timepoint, levels = c("Baseline", "3mth"))
tax_org$Genus <- factor(tax_org$Genus)


matordered <- mat[order(tax_org$Genus),order(sample_org$Timepoint)]


pnames <- tax_table(gen10)[,6]

## Set colours
cols = rainbow(6, v = 0.8)

my_colour = list(
  Timepoint = c("3mth" = cols[2], "Baseline" = cols[1]))

ppm <- pheatmap(matordered, 
         cluster_rows = FALSE,
         cluster_cols = FALSE,
         #color = colorRampPalette(brewer.pal(9, "YlGnBu"))(100),
         color = colorRampPalette(c("black", "darkblue", "cyan", "red", "yellow"))(100),
         # annotation_row = tax_org,
         annotation_col = sample_org, 
         gaps_col = c(49),
         annotation_colors = my_colour,
         labels_row = levels(tax_org$Genus),
         show_colnames= FALSE)
ppm

ggsave(plot = ppm, "covid_composition_heatmap.pdf", path = path_to_plots, height = 5, width = 10)


```

#### Summary

Phylum:

```{r, fig.height =3, fig.width = 3}

phy <- tax_glom(psf, "Phylum")

## Normalize to relative abundance
phyrel <- transform_sample_counts(phy, function(x) x/sum(x))

df <- cbind(otu_table(phyrel), sample_data(phyrel))
names <- tax_table(phyrel)[rownames(tax_table(phyrel)) == taxa_names(tax_table(phyrel)),2]
tax <- data.frame(Phylum = c(paste(names[,1])), asv = rownames(names)) 
means <- df %>% group_by(Timepoint) %>%
  summarise_if(is.numeric, mean) %>%
  gather(asv, abundance, head(tax$asv, n = 1):tail(tax$asv, n = 1))

all <- left_join(means, tax, by = "asv")

pp <- ggplot(all, aes(x = Timepoint, y = abundance, fill = Phylum)) +
  geom_bar(stat = "identity") +
  #facet_grid(Day~Treatment) +
  ylab("Relative abundance") +
  scale_fill_manual(values = cc10) +
  #scale_x_discrete(name = "Treatment") +
  theme_minimal()
pp

ggsave("covid_composition_phylum.pdf", path = path_to_plots, height = 3, width = 3)

```

Family:

```{r, fig.height =5, fig.width = 5}


### Family
fam <- tax_glom(psf, "Family")

## Normalize to relative abundance
famrel <- transform_sample_counts(fam, function(x) x/sum(x))

## Take top 10 most abundant genera
top20 <- names(sort(taxa_sums(famrel), TRUE))[1:20]
fam20 <- prune_taxa(top20, famrel)

df <- cbind(otu_table(fam20), sample_data(fam20))
names <- tax_table(fam20)[rownames(tax_table(fam20)) == taxa_names(tax_table(fam20)),5]
tax <- data.frame(Family = c(paste(names[,1])), asv = rownames(names)) 
means <- df %>% group_by(Timepoint) %>%
  summarise_if(is.numeric, mean) %>%
  gather(asv, abundance, head(tax$asv, n = 1):tail(tax$asv, n = 1))

all <- left_join(means, tax, by = "asv")

pp <- ggplot(all, aes(x = Timepoint, y = abundance, fill = Family)) +
  geom_bar(stat = "identity") +
  #facet_grid(Day~Treatment) +
  ylab("Relative abundance") +
  scale_fill_manual(values = cc20) +
  #scale_x_discrete(name = "Treatment") +
  theme_minimal()
pp

ggsave("covid_composition_family.pdf", path = path_to_plots, height = 5, width = 5)

```

Genus:

```{r, fig.height =5, fig.width = 5}


## Genus
gen <- tax_glom(psf, "Genus")


## Normalize to relative abundance
genrel <- transform_sample_counts(gen, function(x) x/sum(x))

## Take top 10 most abundant genera
top20 <- names(sort(taxa_sums(genrel), TRUE))[1:20]
gen20 <- prune_taxa(top20, genrel)

df <- cbind(otu_table(gen20), sample_data(gen20))
names <- tax_table(gen20)[rownames(tax_table(gen20)) == taxa_names(tax_table(gen20)),6]
tax <- data.frame(Genus = c(paste(names[,1])), asv = rownames(names)) 
means <- df %>% group_by(Timepoint) %>%
  summarise_if(is.numeric, mean) %>%
  gather(asv, abundance, head(tax$asv, n = 1):tail(tax$asv, n = 1))

all <- left_join(means, tax, by = "asv")

pp <- ggplot(all, aes(x = Timepoint, y = abundance, fill = Genus)) +
  geom_bar(stat = "identity") +
  ylab("Relative abundance") +
  scale_fill_manual(values = cc20) +
  #scale_x_discrete(name = "Treatment") +
  theme_minimal()
pp

ggsave("covid_composition_genus.pdf", path = path_to_plots, height = 5, width = 5)

```

### Functional potential

The plot below shows the top 20 most abundant pathways identified across all samples, grouped by timepoint. Values are relative abundance.

Pathways are classified as MetaCyc pathways, based on Enzyme Classification (EC) abundances. 

#### MetaCyc pathways

```{r, fig.height = 5, fig.width = 12}

pad <- read.delim(file.path(path_to_project, "picrust2/output/pathways_out/path_abun_unstrat_descrip.tsv.gz"), check.names = FALSE)

## Make a phyloseq object
rownames(pad) <- pad$pathway
abundances <- pad[,3:ncol(pad)]
paths <- as.matrix(pad[,1:2])

rownames(abundances) <- taxa_names(tax_table(paths))

## Make phyloseq object
paps <- phyloseq(otu_table(abundances, taxa_are_rows=TRUE), sample_data(info), tax_table(paths))

parel <- transform_sample_counts(paps, function(x) x / sum(x))

mock <- subset_samples(parel, SampleID == "mock")

## top 10
top20 <- names(sort(taxa_sums(mock), TRUE))[1:10]
path20 <- prune_taxa(top20, mock)


pp <- plot_bar(path20, x = "SampleID", fill = "description") +
  scale_fill_manual(values = cc10, name = "Pathway") +
  theme(axis.text.x = element_text(angle = 0, hjust = 0.5)) +
  ylab("Relative abundance") +
  theme_bw()
#pp

paps <- subset_samples(paps, !(SampleID %in% c("NTC-2", "mock")))

parel <- transform_sample_counts(paps, function(x) x / sum(x))


## top 20
top20 <- names(sort(taxa_sums(parel), TRUE))[1:20]
path20 <- prune_taxa(top20, parel)


mat <- as(otu_table(path20), "matrix")
# tmat <- t(mat)

tax_org <- data.frame(row.names = taxa_names(path20), Pathway = tax_table(path20)[,2])
sample_org <- data.frame(row.names = sample_names(path20), sample_data(path20)[,4])

colnames(sample_org) <- "Timepoint"

# matordered <- tmat[order(factor(tax_org$Phylum), factor(tax_org$Family)),order(sample_org$Treatment)]
# 
pnames <- tax_table(path20)[,2]

## Set colours
cols = rainbow(6, v = 0.8)

my_colour = list(
  Timepoint = c("3mth" = cols[2], "Baseline" = cols[1]))


ppm <- pheatmap(mat, 
         cluster_rows = FALSE,
         cluster_cols = FALSE,
         color = colorRampPalette(c("black", "darkblue", "cyan", "red", "yellow"))(100),
         # annotation_row = tax_org,
         annotation_col = sample_org, 
         gaps_col = c(40),
         annotation_colors = my_colour,
         labels_row = pnames,
         show_colnames= FALSE)
ppm

ggsave(plot = ppm, "covid_function_pathways_heatmap.pdf", path = path_to_plots, height = 5, width = 12)
```


#### KEGG Groups

```{r, fig.height = 5, fig.width = 12}
ec <- read.delim(file.path(path_to_project, "picrust2/output/EC_metagenome_out/pred_metagenome_unstrat_descrip.tsv.gz"), check.names = FALSE)

## Make a phyloseq object
#rownames(ec) <- ec$description
abundances <- ec[,3:ncol(ec)]
paths <- as.matrix(ec[,1:2])

rownames(abundances) <- taxa_names(tax_table(paths))

## Make phyloseq object
paps <- phyloseq(otu_table(abundances, taxa_are_rows=TRUE), sample_data(info), tax_table(paths))

paps <- subset_samples(paps, !(SampleID %in% c("NTC-2", "mock")))
parel <- transform_sample_counts(paps, function(x) x / sum(x))

## top 20
top20 <- names(sort(taxa_sums(parel), TRUE))[1:20]
path20 <- prune_taxa(top20, parel)

mat <- as(otu_table(path20), "matrix")
# tmat <- t(mat)

tax_org <- data.frame(row.names = taxa_names(path20), Function = tax_table(path20)[,2])
sample_org <- data.frame(row.names = sample_names(path20), sample_data(path20)[,4])

colnames(sample_org) <- "Timepoint"
sample_org$Timepoint <- factor(sample_org$Timepoint, levels = c("Baseline", "3mth"))
tax_org$description <- factor(tax_org$description)

matordered <- mat[order(tax_org$description),order(sample_org$Timepoint)]

## Set colours
cols = rainbow(6, v = 0.8)

my_colour = list(
  Timepoint = c("3mth" = cols[2], "Baseline" = cols[1]))

ppm <- pheatmap(matordered, 
         cluster_rows = FALSE,
         cluster_cols = FALSE,
         color = colorRampPalette(c("black", "darkblue", "cyan", "red", "yellow"))(100),
         # annotation_row = tax_org,
         annotation_col = sample_org, 
         gaps_col = c(49),
         annotation_colors = my_colour,
         labels_row = levels(tax_org$description),
         show_colnames= FALSE)
ppm

ggsave(plot = ppm, "covid_function_ko_heatmap.pdf", path = path_to_plots, height = 5, width = 10)
```

### Changes from baseline to 3 months

Overall composition:

```{r}
bb
ggsave("covid_beta.pdf", path = path_to_plots, height = 5, width = 5)
#bb2
```

Samples connected by ParticipantID:

```{r}

ord <- ordinate(pslog, method = "PCoA", distance = "bray")
evals <- ord$values$Eigenvalues

df <- plot_ordination(pslog, ord, justDF = TRUE)
xx <- paste0("Axis.1", "  [", round(100*ord$values$Relative_eig[1],1), "%]")
yy <- paste0("Axis.2", "  [", round(100*ord$values$Relative_eig[2],1), "%]")


bb1 <- ggplot(df, aes(x = Axis.1, y = Axis.2, color = Timepoint)) +
  coord_fixed(sqrt(evals[2]/evals[1])) +
  geom_point(size = 2) +
  #scale_colour_manual(values = c("black", "blue")) +
  theme_bw() +
  xlab(xx) +
  ylab(yy) +
  #facet_wrap(~Treatment, nrow = 2) +
  geom_label_repel(aes(label = ParticipantID), size = 3, label.padding = 0.1, box.padding = 0.1)
#bb1

bb1 <- ggplot(df, aes(x = Axis.1, y = Axis.2, color = Timepoint, group = ParticipantID)) +
  coord_fixed(sqrt(evals[2]/evals[1])) +
  geom_point(size = 2) +
  scale_colour_manual(values = rainbow(n = 6, v = 0.8)) +
  theme_minimal() +
  xlab(xx) +
  ylab(yy) +
  geom_line(color = "black", size = 1)
  #geom_label_repel(aes(label = ParticipantID), size = 3, label.padding = 0.1, box.padding = 0.1)
bb1
ggsave("covid_beta_participant.pdf", path = path_to_plots, height = 5, width = 5)
```

Permanova:

```{r}

focal <- pslog
permanova <- adonis(dist(otu_table(focal)) ~ sample_data(focal)$Timepoint+ sample_data(focal)$ParticipantID, strata = sample_data(focal)$ParticipantID, permutations = 9999)

results <- permanova$aov.tab
rownames(results) <- c("Timepoint","ParticipantID", "Residuals", "Total")
kable(results) %>% kable_styling(bootstrap_options = "striped", full_width = F, position = "left")
```

Matched participants only:

This includes only participants for which there is microbiome data from both baseline and 3 months. 

```{r}
## Generate list of matched participants
partlist <- levels(sample_data(ps)$ParticipantID)

matchlist <- NULL
for (i in 1: length(partlist)){
  temp <- subset_samples(ps, sample_data(ps)$ParticipantID == partlist[i])
  if (nsamples(temp) == 2){
    matchlist <- c(matchlist, partlist[i])
  }
}

matched <- subset_samples(pslog, sample_data(pslog)$ParticipantID %in% matchlist)

ord <- ordinate(matched, method = "PCoA", distance = "bray")
evals <- ord$values$Eigenvalues

df <- plot_ordination(matched, ord, justDF = TRUE)
xx <- paste0("Axis.1", "  [", round(100*ord$values$Relative_eig[1],1), "%]")
yy <- paste0("Axis.2", "  [", round(100*ord$values$Relative_eig[2],1), "%]")

bb1 <- ggplot(df, aes(x = Axis.1, y = Axis.2, color = Timepoint)) +
  coord_fixed(sqrt(evals[2]/evals[1])) +
  geom_point(size = 2) +
  scale_colour_manual(values = rainbow(n = 6, v = 0.8)) +
  theme_minimal() +
  xlab(xx) +
  ylab(yy) +
  geom_line(aes(group = ParticipantID),color = "black", size = 1) +
  stat_ellipse(geom = "polygon", type = "t", alpha = 0, lty = 2)
bb1

ggsave("covid_beta_matched_only.pdf", path = path_to_plots, height = 5, width = 5)
```

Permanova:

```{r}

focal <- matched
permanova <- adonis(dist(otu_table(focal)) ~ sample_data(focal)$Timepoint+ sample_data(focal)$ParticipantID, strata = sample_data(focal)$ParticipantID, permutations = 9999)

results <- permanova$aov.tab
rownames(results) <- c("Timepoint","ParticipantID", "Residuals", "Total")
kable(results) %>% kable_styling(bootstrap_options = "striped", full_width = F, position = "left")
```

### Specific taxonomic changes

Using DESeq2, taxa that are differentially abundant between baseline and 3 months are identified by fitting a generalized linear model using the negative binomial distribution. 
Note: I tried this using all samples AND using only paired samples and the same three genera were identified as significant with the p-values and log2FC values varying only slightly. The analysis presented here includes all samples. 

#### Genus level

Counts:

```{r, fig.height = 2.5, fig.width = 7}

####### Differential abundance
alpha <- 0.01

## Agglomerate to genus level
psin <- tax_glom(psf, "Genus")

## Using only matched participants
# matched <- subset_samples(psf, sample_data(psf)$ParticipantID %in% matchlist)
# psin <- tax_glom(matched, "Genus")


#diagdds <- phyloseq_to_deseq2(psin, ~group)
diagdds <- phyloseq_to_deseq2(psin, ~ParticipantID + Timepoint)

gm_mean = function(x, na.rm=TRUE){
  exp(sum(log(x[x > 0]), na.rm=na.rm) / length(x))
}
geoMeans = apply(counts(diagdds), 1, gm_mean)
diagdds = estimateSizeFactors(diagdds, geoMeans = geoMeans)
diagdds = DESeq(diagdds, fitType="local")

r1 <- results(diagdds)
s1 <- r1[which(r1$padj < alpha),]

sigtaxa <- rownames(s1)
sigps <- prune_taxa(sigtaxa,psin)
# Log2 transform for visualization
sigpslog <- transform_sample_counts(sigps, function(x) log2(x + 0.5))

tp <- psmelt(sigpslog)

aa <- ggplot(tp, aes(x = Timepoint, y = Abundance, fill = Timepoint)) +
  geom_jitter(color = "black", size = 2, pch = 21, height = 0, width = 0.1) +
  facet_wrap(~Genus, scales = "free_y") +
  theme_minimal() +
  scale_fill_manual(values = rainbow(n = 6, v = 0.8)) +
  stat_summary(fun = base::mean, geom = "point", shape = "_", size = 8, color = "black") +
  scale_y_continuous(name = "Counts", breaks = c(-1,0.585,3.392,6.651, 9.967), labels = c(0, 1, 10, 100, 1000)) +
  theme(axis.text.x = element_blank()) +
  stat_compare_means()
aa

ggsave("covid_da_genus_counts.pdf", path = path_to_plots, height = 2.5, width = 7)

```

Relative abundance:

```{r, fig.height = 2.5, fig.width = 7}

psin <- tax_glom(relf, "Genus")

sigps <- prune_taxa(sigtaxa,psin)


tp <- psmelt(sigps)

aa <- ggplot(tp, aes(x = Timepoint, y = Abundance, fill = Timepoint)) +
  geom_jitter(color = "black", size = 2, pch = 21, height = 0, width = 0.1) +
  facet_wrap(~Genus, scales = "free_y") +
  theme_minimal() +
  scale_fill_manual(values = rainbow(n = 6, v = 0.8)) +
  stat_summary(fun = base::mean, geom = "point", shape = "_", size = 8, color = "black") +
  #scale_y_continuous(name = "Counts", breaks = c(-1,0.585,3.392,6.651, 9.967), labels = c(0, 1, 10, 100, 1000)) +
  theme(axis.text.x = element_blank())
aa

ggsave("covid_da_genus_rel_abund.pdf", path = path_to_plots, height = 2.5, width = 7)
```

Differential abundance statistics:

```{r}

s1 <- as.data.frame(s1)
show <- merge(s1,tax_table(sigps), by = 0)

show <- show %>% select(-Row.names, -stat, -pvalue, -Kingdom, -Species)
kable(show) %>% kable_styling(bootstrap_options = "striped", full_width = F, position = "left")
```

#### Phylum level

Counts:

```{r, fig.height = 2.5, fig.width = 3}

## Agglomerate to genus level
psin <- tax_glom(psf, "Phylum")

## Using only matched participants
# matched <- subset_samples(psf, sample_data(psf)$ParticipantID %in% matchlist)
# psin <- tax_glom(matched, "Genus")


#diagdds <- phyloseq_to_deseq2(psin, ~group)
diagdds <- phyloseq_to_deseq2(psin, ~ParticipantID + Timepoint)

gm_mean = function(x, na.rm=TRUE){
  exp(sum(log(x[x > 0]), na.rm=na.rm) / length(x))
}
geoMeans = apply(counts(diagdds), 1, gm_mean)
diagdds = estimateSizeFactors(diagdds, geoMeans = geoMeans)
diagdds = DESeq(diagdds, fitType="local")

r1 <- results(diagdds)
s1 <- r1[which(r1$padj < alpha),]

sigtaxa <- rownames(s1)
sigps <- prune_taxa(sigtaxa,psin)
# Log2 transform for visualization
sigpslog <- transform_sample_counts(sigps, function(x) log2(x + 0.5))

tp <- psmelt(sigpslog)

aa <- ggplot(tp, aes(x = Timepoint, y = Abundance, fill = Timepoint)) +
  geom_jitter(color = "black", size = 2, pch = 21, height = 0, width = 0.1) +
  facet_wrap(~Phylum, scales = "free_y") +
  theme_minimal() +
  scale_fill_manual(values = rainbow(n = 6, v = 0.8)) +
  stat_summary(fun = base::mean, geom = "point", shape = "_", size = 8, color = "black") +
  scale_y_continuous(name = "Counts", breaks = c(-1,0.585,3.392,6.651, 9.967), labels = c(0, 1, 10, 100, 1000)) +
  theme(axis.text.x = element_blank())
aa

ggsave("covid_da_phylum_counts.pdf", path = path_to_plots, height = 2.5, width = 3)
```

Relative abundance:

```{r, fig.height = 2.5, fig.width = 3}

psin <- tax_glom(relf, "Phylum")

sigps <- prune_taxa(sigtaxa,psin)


tp <- psmelt(sigps)

aa <- ggplot(tp, aes(x = Timepoint, y = Abundance, fill = Timepoint)) +
  geom_jitter(color = "black", size = 2, pch = 21, height = 0, width = 0.1) +
  facet_wrap(~Phylum, scales = "free_y") +
  theme_minimal() +
  scale_fill_manual(values = rainbow(n = 6, v = 0.8)) +
  stat_summary(fun = base::mean, geom = "point", shape = "_", size = 8, color = "black") +
  #scale_y_continuous(name = "Counts", breaks = c(-1,0.585,3.392,6.651, 9.967), labels = c(0, 1, 10, 100, 1000)) +
  theme(axis.text.x = element_blank())
aa

ggsave("covid_da_phylum_rel_abund.pdf", path = path_to_plots, height = 2.5, width = 3)
```

Differential abundance statistics:

```{r}

s1 <- as.data.frame(s1)
show <- merge(s1,tax_table(sigps), by = 0)

show <- show %>% select(-Row.names, -stat, -pvalue, -Kingdom, -Family, -Order, -Class, -Genus, -Species)
kable(show) %>% kable_styling(bootstrap_options = "striped", full_width = F, position = "left")
```

### Fibre groupings

There are N = 72 samples for which fibre gouping data exists. 

```{r}
pslog <- transform_sample_counts(psf, function(x) log(1 + x))

## Remove samples with no fibre grouping

pslog <- subset_samples(pslog, !is.na(sample_data(pslog)$Fibre_grouping))

ord <- ordinate(pslog, method = "PCoA", distance = "bray")
evals <- ord$values$Eigenvalues
bb <- plot_ordination(pslog, ord, color = "Fibre_grouping") +
  coord_fixed(sqrt(evals[2]/evals[1])) +
  theme_minimal() +
  scale_color_manual(values = rainbow(n = 6, v = 0.8)[4:6]) +
  geom_point(size = 2) +
  stat_ellipse(geom = "polygon", type = "t", alpha = 0, lty = 2) +
  facet_wrap(~Timepoint)

bb

ggsave("covid_beta_by_fibre_groupings.pdf", path = path_to_plots, height = 5, width = 8)
```

Permanova:

Baseline:

```{r}

focal <- subset_samples(pslog, sample_data(pslog)$Timepoint == "Baseline")
permanova <- adonis(dist(otu_table(focal)) ~ sample_data(focal)$Fibre_grouping+ sample_data(focal)$ParticipantID, strata = sample_data(focal)$ParticipantID, permutations = 9999)

results <- permanova$aov.tab
rownames(results) <- c("Fibre_grouping","ParticipantID", "Residuals", "Total")
kable(results) %>% kable_styling(bootstrap_options = "striped", full_width = F, position = "left")
```

3 month:

```{r}

focal <- subset_samples(pslog, sample_data(pslog)$Timepoint == "3mth")
permanova <- adonis(dist(otu_table(focal)) ~ sample_data(focal)$Fibre_grouping+ sample_data(focal)$ParticipantID, strata = sample_data(focal)$ParticipantID, permutations = 9999)

results <- permanova$aov.tab
rownames(results) <- c("Fibre_grouping","ParticipantID", "Residuals", "Total")
kable(results) %>% kable_styling(bootstrap_options = "striped", full_width = F, position = "left")
```

By Fibre grouping:

There are N = 64 samples for which both fibre gouping and matching timepoint data exists. 

```{r}
pslog <- subset_samples(matched, !is.na(sample_data(matched)$Fibre_grouping))

ord <- ordinate(pslog, method = "PCoA", distance = "bray")
evals <- ord$values$Eigenvalues
bb <- plot_ordination(pslog, ord, color = "Timepoint") +
  coord_fixed(sqrt(evals[2]/evals[1])) +
  theme_minimal() +
  scale_colour_manual(values = rainbow(n = 6, v = 0.8)) +
  geom_point(size = 2) +
  stat_ellipse(geom = "polygon", type = "t", alpha = 0, lty = 2) +
  facet_wrap(~Fibre_grouping, nrow = 3)

bb

ggsave("covid_beta_by_fibre_groupings_by_grouping.pdf", path = path_to_plots, height = 8, width = 4)

```

Permanova:

High:

```{r}
focal <- subset_samples(pslog, sample_data(pslog)$Fibre_grouping == "High")
permanova <- adonis(dist(otu_table(focal)) ~ sample_data(focal)$Timepoint+ sample_data(focal)$ParticipantID, strata = sample_data(focal)$ParticipantID, permutations = 9999)

results <- permanova$aov.tab
rownames(results) <- c("Timepoint","ParticipantID", "Residuals", "Total")
kable(results) %>% kable_styling(bootstrap_options = "striped", full_width = F, position = "left")
```

Moderate:

```{r}
focal <- subset_samples(pslog, sample_data(pslog)$Fibre_grouping == "Moderate")
permanova <- adonis(dist(otu_table(focal)) ~ sample_data(focal)$Timepoint+ sample_data(focal)$ParticipantID, strata = sample_data(focal)$ParticipantID, permutations = 9999)

results <- permanova$aov.tab
rownames(results) <- c("Timepoint","ParticipantID", "Residuals", "Total")
kable(results) %>% kable_styling(bootstrap_options = "striped", full_width = F, position = "left")
```

Low:

```{r}
focal <- subset_samples(pslog, sample_data(pslog)$Fibre_grouping == "Low")
permanova <- adonis(dist(otu_table(focal)) ~ sample_data(focal)$Timepoint+ sample_data(focal)$ParticipantID, strata = sample_data(focal)$ParticipantID, permutations = 9999)

results <- permanova$aov.tab
rownames(results) <- c("Timepoint","ParticipantID", "Residuals", "Total")
kable(results) %>% kable_styling(bootstrap_options = "striped", full_width = F, position = "left")
```

#### Low Fibre only

```{r}
## Agglomerate to genus level
psin <- tax_glom(psf, "Genus")
matched <- subset_samples(psin, sample_data(psin)$ParticipantID %in% matchlist)
psin <- subset_samples(matched, sample_data(matched)$Fibre_grouping == "Low")

#diagdds <- phyloseq_to_deseq2(psin, ~group)
diagdds <- phyloseq_to_deseq2(psin, ~ParticipantID + Timepoint)

gm_mean = function(x, na.rm=TRUE){
  exp(sum(log(x[x > 0]), na.rm=na.rm) / length(x))
}
geoMeans = apply(counts(diagdds), 1, gm_mean)
diagdds = estimateSizeFactors(diagdds, geoMeans = geoMeans)
diagdds = DESeq(diagdds, fitType="local")

r1 <- results(diagdds)
s1 <- r1[which(r1$padj < alpha),]

```

No significant taxa.


## SCFA data


```{r}
scfa <- read.csv(file.path(path_to_project, "covid_scfa_full.csv"))

## Change order of Timepoint factor
scfa$Timepoint <- factor(scfa$Timepoint, levels = c("Baseline", "3months"))

longdat <- scfa %>% gather(key = "Variable", value = "Value", acetic_acid:TotalBCFA)

gg <- ggplot(longdat, aes(x = ParticipantID, y = Value)) +
  geom_point() +
  scale_y_log10() +
  theme_minimal() +
  theme(axis.text.x = element_text(size = 8, angle = 90, vjust = 0.5)) +
  facet_wrap(~Variable, nrow = 6, scales = "free_y")
#gg

mu <- ddply(longdat, "Variable", summarise, means = mean(Value, na.rm = T))

## log transform
gg <- ggplot(longdat, aes(x = Value)) +
  geom_histogram(aes(y = ..density..), color = "black", fill = "white") +
  theme_minimal() +
  facet_wrap(~Variable, nrow = 3, scales = "free") +
  geom_density(alpha = 0.2, fill = "blue") +
  geom_vline(data = mu, aes(xintercept = means), color = "blue", linetype = "dashed") +
  scale_x_log10()
#gg

gg <- ggplot(longdat, aes(x = Timepoint, y = Value)) +
  geom_jitter(width = 0.1) +
  scale_y_log10() +
  theme_minimal() +
  theme(axis.text.x = element_text(size = 8, angle = 45, vjust = 0.5)) +
  facet_wrap(~Variable, nrow = 3, scales = "free_y")
gg

ggsave("covid_scfa_timepoint.pdf", path = path_to_plots, height = 7, width = 7)

```

### Change from baseline to post vaccine

This includes participants with SCFA data at both timepoints (N = 29). 

```{r}
## Determine which participants have two samples present
partlist <- levels(as.factor(scfa$ParticipantID))
matchlist <- NULL
for (i in 1: length(partlist)){
  temp <- scfa %>% filter(ParticipantID == partlist[i])
  if (nrow(temp) == 2){
    matchlist <- c(matchlist, partlist[i])
  }
}

## Filter out non-matched particpants
scfamatch <- scfa %>% filter(ParticipantID %in% matchlist)

longm <- scfamatch %>% gather(key = "Variable", value = "Value", acetic_acid:TotalBCFA)

gg <- ggplot(longdat, aes(x = Timepoint, y = Value, group = ParticipantID, fill = Timepoint)) +
  geom_point(color = "black", size = 2, pch = 21) +
  scale_y_log10() +
  theme_minimal() +
  theme(axis.text.x = element_blank()) +
  facet_wrap(~Variable, nrow = 3, scales = "free_y") +
  geom_line() +
  scale_fill_manual(values = rainbow(n = 6, v = 0.8))
gg

ggsave("covid_scfa_matched_participants.pdf", path = path_to_plots, height = 7, width = 7)

```

Note: there are no significant changes from baseline to 3 months. 

## Avidity data

Have avidity data for 15 individuals at two timepoints. 

Note that all of this data is from the **relative** fractional avidity

```{r}
## Read in data
rel <- read.csv(file.path(path_to_project, "avidity/microbiome_rel_avidity_long.csv"))

relw <- rel %>% select(-X, -Age, -Sex, -Vaccine.status, -TP, -IgG) %>%
  spread(Range, Avidity)
colnames(relw) <- c("ParticipantID", "Timepoint", "High", "Low", "Medium", "VeryHigh", "VeryLow")
pca <- prcomp(relw[,3:7], scale = T)
fviz_pca_ind(pca, repel = T, col.ind = relw$Timepoint)
fviz_eig(pca)
fviz_pca_var(pca, repel = T)

## Calculate total relative fractional avidity
relw$TRFA_w <- 3*relw$VeryHigh + 2*relw$High + 1.75*relw$Medium + 1.5*relw$Low + 1*relw$VeryLow
relw$TRFA_w_adj <- 10*relw$VeryHigh + 4*relw$High + 2*relw$Medium + 1.5*relw$Low + 1*relw$VeryLow
relw$TRFA <- pca$x[,1]

rel2 <- relw %>% select(ParticipantID, Timepoint, TRFA_w, TRFA_w_adj, TRFA) %>%
  gather(key = "Method", value = "TotalAvidity", TRFA_w:TRFA)

gg <- ggplot(rel2, aes(x = Timepoint, y = TotalAvidity)) +
  geom_jitter(width = 0.1) +
  theme_minimal() +
  facet_wrap(~Method, scale = "free_y")
gg

## Connected by participant ID
gg <- ggplot(rel2, aes(x = Timepoint, y = TotalAvidity, group = ParticipantID)) +
  geom_jitter(width = 0.1) +
  theme_minimal() +
  facet_wrap(~Method, scale = "free_y") +
  geom_line()
gg

# rel2 <- relw %>% select(ParticipantID, Timepoint, TRFA) %>%
#   spread(Timepoint, TRFA)
# colnames(rel2) <- c("ParticipantID", "TRFA_V2", "TRFA_V3")


```

# Multiomic

## Baseline microbiota versus avidity

Baseline:

14 of the 15 participants with avidity data have a baseline microbiome sample.

This section shows the genera that are associated with avidity. A positive fold change (FC) means that higher number of that bacteria are associated with higher avidity and vice versa. 

### At timepoint v2

```{r}

indlist <- levels(as.factor(rel$Sample))
psin <- prune_samples(sample_data(psvst)$ParticipantID %in% indlist, psvst)
#psin <- prune_samples(sample_data(ps)$ParticipantID %in% indlist, ps)
psin <- prune_samples(sample_data(psin)$Timepoint == "Baseline", psin)

mlist <- levels(as.factor(sample_data(psin)$ParticipantID))
avi <- rel2 %>% filter(ParticipantID %in% mlist)

## Separate into v2 and v3?
aviv2 <- relw %>% select(ParticipantID, Timepoint, TRFA_w, TRFA_w_adj, TRFA) %>%
  filter(Timepoint == "V2") %>%
  filter(ParticipantID %in% mlist)

## Add avidity data to phyloseq object
sample_data(psin) <- cbind(sample_data(psin), aviv2)


ord <- ordinate(psin, method = "PCoA", distance = "bray")
evals <- ord$values$Eigenvalues

## Plot ordination
bb <- plot_ordination(psin, ord, color = "TRFA") +
  coord_fixed(sqrt(evals[2]/evals[1])) +
  theme_minimal() +
  #scale_color_manual(values = rainbow(n = 6, v = 0.8)) +
  geom_point(size = 2) +
  stat_ellipse(geom = "polygon", type = "t", alpha = 0, lty = 2)
bb

ggsave("covid_baseline_ordination_trfav2.pdf", path = path_to_plots, height = 4, width = 4)

focal <- psin
permanova <- adonis(dist(otu_table(focal)) ~ sample_data(focal)$TRFA, permutations = 9999)

results <- permanova$aov.tab
rownames(results) <- c("TRFAv2", "Residuals", "Total")
kable(results) %>% kable_styling(bootstrap_options = "striped", full_width = F, position = "left")

```

### At timepoint v3

```{r}

psin <- prune_samples(sample_data(psvst)$ParticipantID %in% indlist, psvst)
#psin <- prune_samples(sample_data(ps)$ParticipantID %in% indlist, ps)
psin <- prune_samples(sample_data(psin)$Timepoint == "3mth", psin)

mlist <- levels(as.factor(sample_data(psin)$ParticipantID))

## Separate into v2 and v3?
aviv3 <- relw %>% select(ParticipantID, Timepoint, TRFA_w, TRFA_w_adj, TRFA) %>%
  filter(Timepoint == "V3") %>%
  filter(ParticipantID %in% mlist)


## Add avidity data to phyloseq object
sample_data(psin) <- cbind(sample_data(psin), aviv3)


ord <- ordinate(psin, method = "PCoA", distance = "bray")
evals <- ord$values$Eigenvalues

## Plot ordination
bb <- plot_ordination(psin, ord, color = "TRFA") +
  coord_fixed(sqrt(evals[2]/evals[1])) +
  theme_minimal() +
  #scale_color_manual(values = rainbow(n = 6, v = 0.8)) +
  geom_point(size = 2) +
  stat_ellipse(geom = "polygon", type = "t", alpha = 0, lty = 2)
bb

ggsave("covid_baseline_ordination_trfav3.pdf", path = path_to_plots, height = 4, width = 4)


focal <- psin
permanova <- adonis(dist(otu_table(focal)) ~ sample_data(focal)$TRFA, permutations = 9999)

results <- permanova$aov.tab
rownames(results) <- c("TRFAv3", "Residuals", "Total")
kable(results) %>% kable_styling(bootstrap_options = "striped", full_width = F, position = "left")



```

### Specific taxonomic changes

#### At genus level

At timepoint V2

```{r, fig.height = 2.5, fig.width = 8}
### Specific taxonomic changes
alpha <- 0.01

psin <- prune_samples(sample_data(ps)$ParticipantID %in% indlist, ps)
psin <- prune_samples(sample_data(psin)$Timepoint == "Baseline", psin)


## Add avidity data to phyloseq object
sample_data(psin) <- cbind(sample_data(psin), aviv2)


## Agglomerate to genus level
psin <- tax_glom(psin, "Genus")


#### TRFA_V2
diagdds <- phyloseq_to_deseq2(psin, ~TRFA)
gm_mean = function(x, na.rm=TRUE){
  exp(sum(log(x[x > 0]), na.rm=na.rm) / length(x))
}
geoMeans = apply(counts(diagdds), 1, gm_mean)
diagdds = estimateSizeFactors(diagdds, geoMeans = geoMeans)
diagdds = DESeq(diagdds, fitType="local")

## Compare
r3 <- results(diagdds)
s3 <- r3[which(r3$padj < alpha),]

sigtaxa <- rownames(s3)
sigps <- prune_taxa(sigtaxa,psin)
# Log2 transform for visualization
sigpslog <- transform_sample_counts(sigps, function(x) log2(x + 0.5))

sigtab <- cbind(as(s3[sigtaxa,], "data.frame"), as(tax_table(sigpslog), "matrix"))


fc <- ggplot(sigtab, aes(x = log2FoldChange, y = Genus, colour = Phylum)) +
  geom_point(size = 4) +
  theme_minimal() +
  geom_vline(xintercept = 0.0, color = "gray", size = 0.5)
fc

ggsave("covid_trfa_v2_fc.pdf", path = path_to_plots, height = 3, width = 6)

sigtab <- sigtab %>% select(-stat, -pvalue, -Kingdom, -Species)
kable(sigtab) %>% kable_styling(bootstrap_options = "striped", full_width = F, position = "left")
```

At timepoint V3

```{r, fig.height = 2.5, fig.width = 8}

psin <- prune_samples(sample_data(ps)$ParticipantID %in% indlist, ps)
psin <- prune_samples(sample_data(psin)$Timepoint == "3mth", psin)

## Add avidity data to phyloseq object
sample_data(psin) <- cbind(sample_data(psin), aviv3)


## Agglomerate to genus level
psin <- tax_glom(psin, "Genus")


#### TRFA_V3
diagdds <- phyloseq_to_deseq2(psin, ~TRFA)
gm_mean = function(x, na.rm=TRUE){
  exp(sum(log(x[x > 0]), na.rm=na.rm) / length(x))
}
geoMeans = apply(counts(diagdds), 1, gm_mean)
diagdds = estimateSizeFactors(diagdds, geoMeans = geoMeans)
diagdds = DESeq(diagdds, fitType="local")

## Compare
r4 <- results(diagdds)
s4 <- r4[which(r4$padj < alpha),]

sigtaxa <- rownames(s4)
sigps <- prune_taxa(sigtaxa,psin)
# Log2 transform for visualization
sigpslog <- transform_sample_counts(sigps, function(x) log2(x + 0.5))

sigtab <- cbind(as(s4[sigtaxa,], "data.frame"), as(tax_table(sigpslog), "matrix"))


fc <- ggplot(sigtab, aes(x = log2FoldChange, y = Genus, colour = Phylum)) +
  #geom_point(aes(size = -log10(padj))) +
  geom_point(size = 4) +
  theme_minimal() +
  geom_vline(xintercept = 0.0, color = "gray", size = 0.5)
fc

ggsave("covid_trfa_v3_fc.pdf", path = path_to_plots, height = 3, width = 6)

sigtab <- sigtab %>% select(-stat, -pvalue, -Kingdom, -Species)
kable(sigtab) %>% kable_styling(bootstrap_options = "striped", full_width = F, position = "left")

```

#### Species level

At timepoint V2

```{r}
psin <- prune_samples(sample_data(psf)$ParticipantID %in% indlist, psf)
psin <- prune_samples(sample_data(psin)$Timepoint == "Baseline", psin)


## Add avidity data to phyloseq object
sample_data(psin) <- cbind(sample_data(psin), aviv2)

## Agglomerate to genus level
psin <- tax_glom(psin, "Species")

diagdds <- phyloseq_to_deseq2(psin, ~TRFA)
gm_mean = function(x, na.rm=TRUE){
  exp(sum(log(x[x > 0]), na.rm=na.rm) / length(x))
}
geoMeans = apply(counts(diagdds), 1, gm_mean)
diagdds = estimateSizeFactors(diagdds, geoMeans = geoMeans)
diagdds = DESeq(diagdds, fitType="local")

## Compare
r1 <- results(diagdds)
s1 <- r1[which(r1$padj < alpha),]

sigtaxa <- rownames(s1)
sigtaxa <- sigtaxa[c(1,3:9, 12:13)]
sigps <- prune_taxa(sigtaxa,psin)
# Log2 transform for visualization
sigpslog <- transform_sample_counts(sigps, function(x) log2(x + 0.5))

sigtab <- cbind(as(s1[sigtaxa,], "data.frame"), as(tax_table(sigpslog), "matrix"))

fc <- ggplot(sigtab, aes(x = log2FoldChange, y = Genus, colour = Phylum)) +
  #geom_point(aes(size = -log10(padj))) +
  geom_point(size = 4) +
  theme_minimal() +
  geom_vline(xintercept = 0.0, color = "gray", size = 0.5)
fc

ggsave("covid_trfa_v2_fc_species.pdf", path = path_to_plots, height = 3, width = 6)

write.csv(sigtab, file.path(path_to_plots, "covid_avidity_v2_significant_species.csv"))

sigtab <- sigtab %>% select(-stat, -pvalue, -Kingdom)
kable(sigtab) %>% kable_styling(bootstrap_options = "striped", full_width = F, position = "left")
```

At timepoint V3

```{r}

psin <- prune_samples(sample_data(psf)$ParticipantID %in% indlist, psf)
psin <- prune_samples(sample_data(psin)$Timepoint == "3mth", psin)

## Add avidity data to phyloseq object
sample_data(psin) <- cbind(sample_data(psin), aviv3)

## Agglomerate to genus level
psin <- tax_glom(psin, "Species")


diagdds <- phyloseq_to_deseq2(psin, ~TRFA)
gm_mean = function(x, na.rm=TRUE){
  exp(sum(log(x[x > 0]), na.rm=na.rm) / length(x))
}
geoMeans = apply(counts(diagdds), 1, gm_mean)
diagdds = estimateSizeFactors(diagdds, geoMeans = geoMeans)
diagdds = DESeq(diagdds, fitType="local")

## Compare
r1 <- results(diagdds)
s1 <- r1[which(r1$padj < alpha),]

sigtaxa <- rownames(s1)
sigtaxa <- sigtaxa[c(1:13)]
sigps <- prune_taxa(sigtaxa,psin)

# Log2 transform for visualization
sigpslog <- transform_sample_counts(sigps, function(x) log2(x + 0.5))

sigtab <- cbind(as(s1[sigtaxa,], "data.frame"), as(tax_table(sigpslog), "matrix"))

fc <- ggplot(sigtab, aes(x = log2FoldChange, y = Genus, colour = Phylum)) +
  #geom_point(aes(size = -log10(padj))) +
  geom_point(size = 4) +
  theme_minimal() +
  geom_vline(xintercept = 0.0, color = "gray", size = 0.5)
fc

ggsave("covid_trfa_v3_fc_species.pdf", path = path_to_plots, height = 4, width = 6)

write.csv(sigtab, file.path(path_to_plots, "covid_avidity_v3_significant_species.csv"))


sigtab <- sigtab %>% select(-stat, -pvalue, -Kingdom)
kable(sigtab) %>% kable_styling(bootstrap_options = "striped", full_width = F, position = "left")
```

#### ASV level

At timepoint V2

```{r}


psin <- prune_samples(sample_data(psf)$ParticipantID %in% indlist, psf)
psin <- prune_samples(sample_data(psin)$Timepoint == "Baseline", psin)

## Add avidity data to phyloseq object
sample_data(psin) <- cbind(sample_data(psin), aviv2)


diagdds <- phyloseq_to_deseq2(psin, ~TRFA)
gm_mean = function(x, na.rm=TRUE){
  exp(sum(log(x[x > 0]), na.rm=na.rm) / length(x))
}
geoMeans = apply(counts(diagdds), 1, gm_mean)
diagdds = estimateSizeFactors(diagdds, geoMeans = geoMeans)
diagdds = DESeq(diagdds, fitType="local")

## Compare
r1 <- results(diagdds)
s1 <- r1[which(r1$padj < alpha),]

sigtaxa <- rownames(s1)
sigps <- prune_taxa(sigtaxa,psin)
# Log2 transform for visualization
sigpslog <- transform_sample_counts(sigps, function(x) log2(x + 0.5))

sigtab <- cbind(as(s1[sigtaxa,], "data.frame"), as(tax_table(sigpslog), "matrix"))

fc <- ggplot(sigtab, aes(x = log2FoldChange, y = Genus, colour = Phylum)) +
  #geom_point(aes(size = -log10(padj))) +
  geom_point(size = 4) +
  theme_minimal() +
  geom_vline(xintercept = 0.0, color = "gray", size = 0.5)
fc

ggsave("covid_trfa_v2_fc_asv.pdf", path = path_to_plots, height = 5, width = 6)

sigtab <- sigtab %>% select(-stat, -pvalue, -Kingdom)
kable(sigtab) %>% kable_styling(bootstrap_options = "striped", full_width = F, position = "left")
```

At timepoint V3

```{r}

psin <- prune_samples(sample_data(psf)$ParticipantID %in% indlist, psf)
psin <- prune_samples(sample_data(psin)$Timepoint == "3mth", psin)

## Add avidity data to phyloseq object
sample_data(psin) <- cbind(sample_data(psin), aviv3)

diagdds <- phyloseq_to_deseq2(psin, ~TRFA)
gm_mean = function(x, na.rm=TRUE){
  exp(sum(log(x[x > 0]), na.rm=na.rm) / length(x))
}
geoMeans = apply(counts(diagdds), 1, gm_mean)
diagdds = estimateSizeFactors(diagdds, geoMeans = geoMeans)
diagdds = DESeq(diagdds, fitType="local")

## Compare
r1 <- results(diagdds)
s1 <- r1[which(r1$padj < alpha),]

sigtaxa <- rownames(s1)
sigps <- prune_taxa(sigtaxa,psin)
# Log2 transform for visualization
sigpslog <- transform_sample_counts(sigps, function(x) log2(x + 0.5))

sigtab <- cbind(as(s1[sigtaxa,], "data.frame"), as(tax_table(sigpslog), "matrix"))

fc <- ggplot(sigtab, aes(x = log2FoldChange, y = Genus, colour = Phylum)) +
  #geom_point(aes(size = -log10(padj))) +
  geom_point(size = 4) +
  theme_minimal() +
  geom_vline(xintercept = 0.0, color = "gray", size = 0.5)
fc

ggsave("covid_trfa_v3_fc_asv.pdf", path = path_to_plots, height = 4, width = 6)

sigtab <- sigtab %>% select(-stat, -pvalue, -Kingdom)
kable(sigtab) %>% kable_styling(bootstrap_options = "striped", full_width = F, position = "left")
```


## SCFA versus avidity

### Baseline

```{r, fig.height = 8, fig.width = 8}
scfa <- read.csv(file.path(path_to_project, "covid_scfa_full.csv"))

longdat <- scfa %>% gather(key = "Variable", value = "Value", acetic_acid:TotalBCFA)


###### At baseline
scfabase <- scfa %>% filter(Timepoint == "Baseline")
avibase <- relw %>% filter(Timepoint == "V2")

sabase <- merge(scfabase, avibase, by = "ParticipantID") %>% 
  select(ParticipantID, acetic_acid:TotalBCFA, TRFA) %>%
  gather(key = "SCFA", value = "Conc", acetic_acid:TotalBCFA)


gg <- ggplot(sabase, aes(x = Conc, y = TRFA)) +
  geom_point() +
  facet_wrap(~SCFA, scales = "free") +
  theme_minimal()+
  scale_x_log10() +
  geom_smooth(method = "lm", se = FALSE, linetype = "dashed", color = "darkred") +
  stat_cor()
gg

ggsave("covid_scfa_avidity_baseline.pdf", path = path_to_plots, height = 6, width = 6)

```

### 3 months

```{r, fig.height = 8, fig.width = 8}


###### At baseline
scfa3 <- scfa %>% filter(Timepoint == "3months")
avi3 <- relw %>% filter(Timepoint == "V3")

sa3 <- merge(scfa3, avi3, by = "ParticipantID") %>% 
  select(ParticipantID, acetic_acid:TotalBCFA, TRFA) %>%
  gather(key = "SCFA", value = "Conc", acetic_acid:TotalBCFA)


gg <- ggplot(sa3, aes(x = Conc, y = TRFA)) +
  geom_point() +
  facet_wrap(~SCFA, scales = "free") +
  theme_minimal()+
  scale_x_log10() +
  geom_smooth(method = "lm", se = FALSE, linetype = "dashed", color = "darkred") +
  stat_cor()
gg

ggsave("covid_scfa_avidity_3months.pdf", path = path_to_plots, height = 6, width = 6)

```

### All

```{r, fig.height = 8, fig.width = 9}
scfaa <- scfa %>% select(-Stool_ID)
avia <- relw %>% select(ParticipantID, Timepoint, TRFA)

avia$Timepoint <- as.factor(avia$Timepoint)
levels(avia$Timepoint) <- list("Baseline" = "V2", "3months" = "V3")

saa <- merge(scfaa, avia, by = c("ParticipantID", "Timepoint")) %>%
  gather(key = "SCFA", value = "Conc", acetic_acid:TotalBCFA)

gg <- ggplot(saa, aes(x = Conc, y = TRFA, color = Timepoint)) +
  geom_point() +
  facet_wrap(~SCFA, scales = "free") +
  theme_minimal()+
  scale_x_log10() +
  geom_smooth(method = "lm", se = FALSE, linetype = "dashed", color = "black") +
  stat_cor()
gg

ggsave("covid_scfa_avidity_3months.pdf", path = path_to_plots, height = 6, width = 7)

```

# Bonus Content

## Fibre grouping versus avidity

```{r}
fibre <- info %>% filter(Timepoint == "Baseline") %>%
  select(ParticipantID, Fibre_grouping) %>%
  filter(!is.na(Fibre_grouping))

fibre$Fibre_grouping <- factor(fibre$Fibre_grouping, levels = c("Low", "Moderate", "High"))

avif <- avibase %>% select(ParticipantID, TRFA)

fibre <- merge(fibre, avif, by = "ParticipantID")

gg <- ggplot(fibre, aes(x = Fibre_grouping, y = TRFA)) +
  #geom_point() +
  geom_jitter(color = "black", size = 2, height = 0, width = 0.1) +
  theme_minimal() +
  #scale_y_log10() +
  stat_summary(fun = base::mean, geom = "point", shape = "_", size = 8, color = "black") +
  stat_compare_means()
gg

ggsave("covid_fibre_groupings_by_TRFA.pdf", path = path_to_plots, height = 3, width = 3)


## Change in avidity versus fibre grouping


avif <- avi3 %>% select(ParticipantID, TRFA)
colnames(avif) <- c("ParticipantID", "TRFAv3")

fibre <- merge(fibre, avif, by = "ParticipantID") 

dd <- fibre %>% mutate(Delta = TRFAv3-TRFA)

fl <- fibre %>% gather(key = "Timepoint", value = "TRFA", TRFA:TRFAv3)

gg1 <- ggplot(fl, aes(x = Timepoint, y = TRFA, colour = Timepoint)) +
  #geom_point() +
  geom_jitter(size = 2, height = 0, width = 0.1) +
  theme_minimal() +
  scale_colour_manual(values = c("lightblue", "darkblue")) +
  #scale_y_log10() +
  stat_summary(fun = base::mean, geom = "point", shape = "_", size = 8, color = "black") +
  #stat_compare_means() +
  facet_wrap(~Fibre_grouping) +
  scale_x_discrete(labels = c("Dose 1", "Dose 2")) +
  theme(legend.position = "none")
gg1



gg2 <- ggplot(dd, aes(x = Fibre_grouping, y = Delta)) +
  #geom_point() +
  geom_jitter(color = "black", size = 2, height = 0, width = 0.1) +
  theme_minimal() +
  #scale_y_log10() +
  stat_summary(fun = base::mean, geom = "point", shape = "_", size = 8, color = "black") +
  stat_compare_means()
gg2

pdf(file.path(path_to_plots, "covid_fibre_groupings_by_TRFA_delta.pdf"), height = 3, width = 6)
grid.arrange(gg1, gg2, nrow = 1, widths = c(3,2))
dev.off()
```

